//
// Created by 이동한 on 2025. 2. 19..
//
/** 재귀로 완전탐색(with 원복)
 * 문자열 비교는 길이가 같아야한다. "23" > "123" => "023" < "123"
 * 따라서 항상 길이를 맞추어 주자!!
문제
두 종류의 부등호 기호 ‘<’와 ‘>’가 k개 나열된 순서열 A가 있다.
우리는 이 부등호 기호 앞뒤에 서로 다른 한 자릿수 숫자를 넣어서
모든 부등호 관계를 만족시키려고 한다. 예를 들어,
제시된 부등호 순서열 A가 다음과 같다고 하자.
A ⇒ < < < > < < > < >
부등호 기호 앞뒤에 넣을 수 있는 숫자는 0부터 9까지의 정수이며
선택된 숫자는 모두 달라야 한다. 아래는 부등호 순서열 A를 만족시키는 한 예이다.
3 < 4 < 5 < 6 > 1 < 2 < 8 > 7 < 9 > 0
이 상황에서 부등호 기호를 제거한 뒤,
숫자를 모두 붙이면 하나의 수를 만들 수 있는데
이 수를 주어진 부등호 관계를 만족시키는 정수라고 한다.
그런데 주어진 부등호 관계를 만족하는 정수는 하나 이상 존재한다.
예를 들어 3456128790 뿐만 아니라 5689023174도
아래와 같이 부등호 관계 A를 만족시킨다.
5 < 6 < 8 < 9 > 0 < 2 < 3 > 1 < 7 > 4

여러분은 제시된 k개의 부등호 순서를 만족하는 (k+1)자리의
정수 중에서 최댓값과 최솟값을 찾아야 한다.
앞서 설명한 대로 각 부등호의 앞뒤에 들어가는 숫자는
{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }중에서
선택해야 하며 선택된 숫자는 모두 달라야 한다.

입력
첫 줄에 부등호 문자의 개수를 나타내는 정수 k가 주어진다.
그 다음 줄에는 k개의 부등호 기호가 하나의
공백을 두고 한 줄에 모두 제시된다. k의 범위는 2 ≤ k ≤ 9 이다.

출력
여러분은 제시된 부등호 관계를 만족하는 k+1 자리의 최대,
최소 정수를 첫째 줄과 둘째 줄에 각각 출력해야 한다.
단 아래 예(1)과 같이 첫 자리가 0인 경우도 정수에
포함되어야 한다. 모든 입력에 답은 항상 존재하며
출력 정수는 하나의 문자열이 되도록 해야 한다.

예제 입력 1
2
< >
예제 출력 1
897
021
 * @see https://www.acmicpc.net/problem/2529
 */
#include <bits/stdc++.h>
using namespace std;

int N,vst[10];
vector<string> v;
char arr[10];

// 'a' < 'b' | 'a' > 'b' 임을 검증하는 로직.
bool isValid(char a, char b, char op) {
    if (a<b && op == '<') return true;
    if (a>b && op == '>') return true;
    return false;
}
void go(int idx, string acc) {
    // 괄호보다 숫자가 한개 더 많으므로.
    if (idx == N+1) {
        v.emplace_back(acc);
        return;
    }
    for (int i =0; i<10; i++) {
        if (vst[i]) continue;
        // 처음 시행하거나, 유효성을 통과하면 진행한다.
        if (idx == 0 || isValid(acc[idx-1], i+'0', arr[idx-1])) {
            // i + '0' -> 숫자를 문자열 숫자로
            vst[i] = 1;
            go(idx+1, acc+ to_string(i)); // string + to_string(int);
            vst[i] = 0;
        }
    }
}
int main() {
    cin >> N;
    for (int i=0; i<N; i++) {
        cin >> arr[i];
    }
    go(0,"");
    sort(v.begin(), v.end());
    // v[v.size()-1] 과 같이 벡터의 맨끝을 탐색한다.
    cout << v[v.size()-1] << "\n" << v[0] << "\n";
    return 0;
}
