//
// Created by 이동한 on 2025. 2. 20..
//
/** 백트래킹 + 시뮬레이션
 * 항상 공간 복잡도를 계산해볼 것, 이 경우 300C3 정도로 나온다.
문제
사다리 게임은 N개의 세로선과 M개의 가로선으로 이루어져 있다.
인접한 세로선 사이에는 가로선을 놓을 수 있는데,
각각의 세로선마다 가로선을 놓을 수 있는 위치의 개수는 H이고,
모든 세로선이 같은 위치를 갖는다.
아래 그림은 N = 5, H = 6 인 경우의 그림이고, 가로선은 없다.
초록선은 세로선을 나타내고, 초록선과 점선이 교차하는 점은
가로선을 놓을 수 있는 점이다.
가로선은 인접한 두 세로선을 연결해야 한다.
단, 두 가로선이 연속하거나 서로 접하면 안 된다.
또, 가로선은 점선 위에 있어야 한다.

위의 그림에는 가로선이 총 5개 있다.
가로선은 위의 그림과 같이 인접한 두 세로선을 연결해야 하고,
가로선을 놓을 수 있는 위치를 연결해야 한다.

사다리 게임은 각각의 세로선마다 게임을 진행하고,
세로선의 가장 위에서부터 아래 방향으로 내려가야 한다.
이때, 가로선을 만나면 가로선을 이용해 옆 세로선으로 이동한
다음, 이동한 세로선에서 아래 방향으로 이동해야 한다.

위의 그림에서 1번은 3번으로, 2번은 2번으로, 3번은 5번으로,
4번은 1번으로, 5번은 4번으로 도착하게 된다.
아래 두 그림은 1번과 2번이 어떻게 이동했는지 나타내는 그림이다.

1번 세로선	2번 세로선

사다리에 가로선을 추가해서,
사다리 게임의 결과를 조작하려고 한다.
이때, i번 세로선의 결과가 i번이 나와야 한다.
그렇게 하기 위해서 추가해야 하는 가로선
개수의 최솟값을 구하는 프로그램을 작성하시오.

입력
첫째 줄에 세로선의 개수 N, 가로선의 개수 M,
세로선마다 가로선을 놓을 수 있는 위치의 개수 H가 주어진다.
(2 ≤ N ≤ 10, 1 ≤ H ≤ 30, 0 ≤ M ≤ (N-1)×H)

둘째 줄부터 M개의 줄에는 가로선의 정보가 한 줄에 하나씩 주어진다.
가로선의 정보는 두 정수 a과 b로 나타낸다.
(1 ≤ a ≤ H, 1 ≤ b ≤ N-1)
b번 세로선과 b+1번 세로선을 a번 점선 위치에서 연결했다는 의미이다.

가장 위에 있는 점선의 번호는 1번이고, 아래로 내려갈 때마다 1이 증가한다. 세로선은 가장 왼쪽에 있는 것의 번호가 1번이고, 오른쪽으로 갈 때마다 1이 증가한다.
입력으로 주어지는 가로선이 서로 연속하는 경우는 없다.

출력
i번 세로선의 결과가 i번이 나오도록 사다리 게임을 조작하려면,
추가해야 하는 가로선 개수의 최솟값을 출력한다.
만약, 정답이 3보다 큰 값이면 -1을 출력한다. 또, 불가능한 경우에도 -1을 출력한다.

예제 입력 1
2 0 3
예제 출력 1
0
 * @see https://www.acmicpc.net/problem/15684
 */
#include <bits/stdc++.h>
using namespace std;
const int INF = 987654321;
int N,M,H,ret = INF;
int r,c;
int vst[33][13];

bool isValidPath() {
    for (int i =1; i<=N; i++) {
        int start = i; // 모든 세로줄에 대하여 출발한 세로줄과 도착 세로줄의 위치가 같아야한다.
        for (int j =1; j<=H; j++) {
            if (vst[j][start]) start++; // 현재 세로줄에서 다음 세로줄로 가로줄을 통해 이어진 경우
            else if (vst[j][start-1]) start--; // 이전 세로줄에서 현재 세로줄로 가로줄을 통해 이어진 경우
        }
        if (start != i) return false;
    }
    return true;
}

/**
 * 백트래킹을 이용하여 탐색 불필요한 부분 가지치기를 통해 효율을 높인다.
 * @param here 사다리타기 탐색은 내려가면서 진행된다. 내려갈 탐색 시작 지점
 * @param cnt 누적된 추가적으로 필요한 가로줄 수
 */
void go(int here, int cnt) {
    if (cnt > 3 || cnt >= ret) return;
    if (isValidPath()) {
        ret = min(ret, cnt);
        return;
    }
    // 탐색은 내려가므로 현재 지점 부터 내려가면서 백트래킹 탐색 진행
    for (int i =here; i<=H; i++) {
        // 현재 내려온 지점 부터 모든 세로줄에 대하여 가로줄 추가 하면서 탐색
        for (int j=1; j<=N; j++) {
            // 현재 세로줄에 대하여 앞 뒤로 가로줄이 연결된 경우 pass
            if (vst[i][j] || vst[i][j-1] || vst[i][j+1]) continue;
            vst[i][j] = 1;
            go(i, cnt +1);
            vst[i][j] = 0;
        }
    }
}
int main() {
    ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
    cin >> N >> M >> H;
    for (int i =0; i< M; i++) {
        cin >> r >> c;
        vst[r][c] = 1;
    }
    go(1,0);
    if (ret == INF) cout << -1 << "\n";
    else cout << ret << "\n";
    return 0;
}
